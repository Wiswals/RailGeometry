#*******************************************************************************************************************
# Name:          	ConfigureTrackGeometry.ini
# Author:             	Lewis Walsh
# Date Created:        	2019-09-26
# Last Updated: 	    2021-05-07
# Version:		0.5.0
#*******************************************************************************************************************
# Description:        	Configuration file for GeoMoS Automated Track Geometry. This configuration 
#			file is used to provide the AutomatedTrackGeometry.exe program with user
#			defined settings.

# Usage:		Enter user defined variable values into this configuration file using the
#			provided placeholders.
#
#			1. Placeholders can be identified by strings beginning with the '::' character.
#			2. Please ensure that entered data follows the following format:
#
#				::placeholder=value
#
#			   With no spaces between the placeholder name tag, the equals character and
#			   the start of the user entered value. e.g.:
#
#				::placeholder1=24
#				::placeholder2=1.2477
#				::placeholder3=GP02
#				::placeholder4=email@account.com
#				::placeholder5=This is an example
#
#			3. Please use the header information above each placeholder to help explain
#			   the purpose of each placeholder and the data type that the user is expected
#			   to enter.
#			4. When a placeholder value is not provided, or incorrectly defined, the
#			   program will revert to its default values. Please check the program
#			   log files to see what settings are being used for each calculation set.
#*******************************************************************************************************************

# Server Name [varchar - text string]:
#	The name of the server that you wish to connect to. Specifies the instance of SQL Server to which to connect
#   via the sqlcmd utility.
::ServerName=LSVGM01

# Database Name [varchar - text string]:
#	The name of the GeoMoS database that you wish to connect to within the sqlcmd utility. This parameter specifies 
#   the initial database. Internal calls to other databases may occur automaticaly within the script.
::DatabaseName=LCR-001

# Calculation Frequency [integer - minutes]:
#	The required frequency, in minutes, of calculations. i.e. the time spacing between required calculations. 
#	If the time difference between the last calculation that was run for a given track and the current time
#	of execution {Execution Time} is more than the specified value, a new set of geometry calculations 
#	will be performed.
::CalculationFrequency=30

# Data Extraction Window [integer - hours]:
#	The number of hours to look back when extracting data for the calculations. This value will help to 
#	create a data extraction window which will be defined by the {Execution Time} as the end of the 
#	search window, and the {Execution Time} minus the provided value as the start time. This will allow
# 	the program to find the latest prism data from GeoMoS while also accounting for temporarily blocked
#	prisms. I.e. the program will use the latest observations found within the created extraction window. 
::DataExtractionWindow=72

# Overdue Data Warning [integer - hours]:
#	The number of hours used as a trigger for an email warning when prism data is considered 'overdue'. 
#	When the number of hours since the latest observation extracted for a prism is larger than the provided
# 	limit value, the prism will be marked as overdue. However, the data will still be used in calculations
#	so long as it has been observed within the provided {::DataExtractionWindow}. Please beware, that
#	a user will only be alerted of the overdue data if the {::SendOverdueEmail} parameter is set to enable.
::OverdueDataWarning=48

# Send Overdue Email Alert [bit - binary]:
#	Used to enable (1) or disable (0) the sending of email alerts. Email will be sent if {::SendOverdueEmail}
#	is equal to 1 AND there is at least one prism with a time since last observation value larger than the
#	{::OverdueDataWarning} value AND {::EmailProfile} exists AND {::EmailRecipients} contains at least one valid
#	email address. 
::SendOverdueEmail=1

# Email Profile [varchar - text string]:
#	The name of the email profile (if setup) to send the overdue data alerts from. The profile will need to
#	be linked to a valid mail account. Please contact administrator or code author to setup a mail profile.
::EmailProfile=Track Geometry Alerts Profile

# Email Recipients List [varchar - text string]:
#	The list of recipients who will receive the email alert about overdue data. The recipients list can
#	contain multiple addresses separated by a semicolon character. e.g. email1@account.com; email2@account.com
::EmailRecipients=lwalsh@landsurveys.net.au; dcoulthard@landsurveys.net.au; powsianka@landsurveys.net.au

# Track Chainage Interpolation Step [decimal - meters]:
#	The spacing at which calculated track alignment will be performed, i.e. a virtual point will be interpolated on 
#	the rail, from the extracted prism data, every {::ChainageStep} meters.
::ChainageStep=0.5

# Prism Spacing Limit [decimal - meters]:
#	A value used to check the spacing between monitoring prisms. If any prisms are separated by more than the specified
#	value, no interpolation will be performed between the extended gap. This is used to avoid erroneous lineal
#	interpolation of virtual rail points when prisms are missing or obstructed.
::PrismSpacingLimit=30

# Short Twist Step Length [decimal - meters]:
#	The spacing at which short twist should be calculated, looking in reverse chainage. Twist will be calculated as the
#	difference in cant between the current chainage and the cant at chainage {::ShortTwistStep} meters back.
::ShortTwistStep=3.5

# Long Twist Step Length [decimal - meters]:
#	The spacing at which long twist should be calculated, looking in reverse chainage. Twist will be calculated as the
#	difference in cant between the current chainage and the cant at chainage {::LongTwistStep} meters back.
::LongTwistStep=10

# Short Line Chord Length [decimal - meters]:
#	The chord length for short line (horizontal versine) calculations. The script with use this value to create a 
#	reference chord by looking back and forward in chainage at half of the provided length value. The result is a
#	chord equal to the specified length that is centred at the calculation chainage.
::ShortLineChord=10

# Long Line Chord Length [decimal - meters]:
#	The chord length for long line (horizontal versine) calculations. The script with use this value to create a 
#	reference chord by looking back and forward in chainage at half of the provided length value. The result is a
#	chord equal to the specified length that is centred at the calculation chainage.
::LongLineChord=20

# Short Top Chord Length [decimal - meters]:
#	The chord length for short top (vertical versine) calculations. The script with use this value to create a 
#	reference chord by looking back and forward in chainage at half of the provided length value. The result is a
#	chord equal to the specified length that is centred at the calculation chainage.
::ShortTopChord=10

# Long Top Chord Length [decimal - meters]:
#	The chord length for long top (vertical versine) calculations. The script with use this value to create a 
#	reference chord by looking back and forward in chainage at half of the provided length value. The result is a
#	chord equal to the specified length that is centred at the calculation chainage.
::LongTopChord=20

# Left Rail Naming Indicator [varchar - text string]
# 	A search string used to identify all left rail prisms. The script will compare the supplied string to all
#	available prism data for a given extraction and categorise the prisms into left or right groupings based
#	on the existence of a string match between the provided value and the prism name.
::LeftRailIndicator=RPL

# Right Rail Naming Indicator [varchar - text string]
# 	A search string used to identify all right rail prisms. The script will compare the supplied string to all
#	available prism data for a given extraction and categorise the prisms into left or right groupings based
#	on the existence of a string match between the provided value and the prism name.
::RightRailIndicator=RPR

# Format string to use for chainage compoentn of geometry instrument name [Varchar - text string]:
#   The string entered into this variable will be applied to the track chainage for subseqent geometry instrument creation. 
#   Geometry instrument names are by default a combination of the track code and the chaiange at which a geometry set has been calculated. 
#   For example, track 'RRD' calculations at chainage '4795.3122' would generate a Geometry name of 'RRD-4795.31' if the supplied format string was #.00
#   For example, track 'RRD' calculations at chainage '4795.3122' would generate a Geometry name of 'RRD-004795' if the supplied format string was 000000
::ChainageNameFormat=#.0